//not mine..
//http://blog.jobbole.com/42550/
//当给一个很长的东西，在不知道长度的情况下随机返回用此方法
//When we read the first node head, if the stream ListNode stops here, we can just return the head.val. The possibility is 1/1.

//When we read the second node, we can decide if we replace the result r or not. The possibility is 1/2. So we just generate a random number between 0 and 1, and check if it is equal to 1. If it is 1, replace r as the value of the current node, otherwise we don't touch r, so its value is still the value of head.

//When we read the third node, now the result r is one of value in the head or second node. We just decide if we replace the value of r as the value of current node(third node). The possibility of replacing it is 1/3, namely the possibility of we don't touch r is 2/3. So we just generate a random number between 0 ~ 2, and if the result is 2 we replace r.


class Solution {
    ListNode head;
    Random random;
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    public Solution(ListNode h) {
        head = h;
        random = new Random(); 
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        ListNode node = head;
        int i = 1;
        int res = node.val;
        while (node.next != null){
            node = node.next;
            if(random.nextInt(i + 1) == i) //这句就是在i范围内产生随机数和i相等的情况，相当于1/i的概率
                res = node.val;
            i ++;
        }
        
        return res;
    }
}
